// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    selectedBlog  String?

    likes    Likes[]
    views    Views[]
    blogs    Site[]
    accounts Account[]
    sessions Session[]
    Authors  Authors[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Site {
    id String @id @default(cuid())

    subdomain   String  @unique
    title       String
    description String
    logo        String?

    userId   String
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    Articles Article[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Status {
    published
    unpublished
}

model Article {
    id String @id @default(cuid())

    title   String
    slug    String   @unique
    content Json
    topics  String[]
    status  Status   @default(unpublished)

    authorId String?
    author   Authors? @relation(fields: [authorId], references: [id])
    likes    Likes[]
    views    Views[]
    siteId   String?
    site     Site?    @relation(fields: [siteId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([siteId])
}

model Authors {
    id       String    @id @default(cuid())
    name     String
    username String    @unique
    avatar   String
    userId   String
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    articles Article[]
}

model Likes {
    userId    String
    user      User    @relation(fields: [userId], references: [id])
    article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId String

    @@id([userId, articleId])
    @@index([userId])
    @@index([articleId])
}

model Views {
    id        String   @id @default(cuid())
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId String
    createdAt DateTime @default(now())

    @@index([userId])
    @@index([articleId])
}
